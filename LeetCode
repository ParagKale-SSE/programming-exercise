// leet code 217 - Contains Duplicate
    Dictionary<int,int> dic = new Dictionary<int,int>();
    for (int i = 0; i < nums.Length; i++)
    {
        if (!dic.ContainsKey(nums[i]))
        {
            dic.Add(nums[i], 1);
        }
        else
        {
            dic[nums[i]]++;
        }
    }
    return dic.Where(x => x.Value > 1).Any();

-----------------------------------------------------------------------------------------------------

// leet code 500 - KeyBoard Row

List<string> lstKeyBoardStr = new List<string>();
List<string> output = new List<string>();
Dictionary<char,int> dict = new Dictionary<char,int>();
int rowNum = 1;
lstKeyBoardStr.Add("qwertyuiop");
lstKeyBoardStr.Add("asdfghjkl");
lstKeyBoardStr.Add("zxcvbnm");

foreach(var item in lstKeyBoardStr)
{
    foreach(var ch in item)
    {
        dict.Add(ch, rowNum);
    }
    rowNum++;
}

foreach(var word in words)
{
    var valid = true;
    var lowerWord = word.ToLower();
    for (int i= 0; i< word.Length-1; i++)
    {
        if (dict[lowerWord[i]] != dict[lowerWord[i + 1]])
        {
            valid = false;
            break;
        }
    }
    if (valid)
    {
        output.Add(word);
    }
}
return output.ToArray();

--------------------------------------------------------------------------------------

LeetCode 20 - Valid Parentheses

Dictionary<char,char> keyValuePairs = new Dictionary<char,char>();
Stack<char> stack = new Stack<char>();
bool isValid = true;
keyValuePairs.Add(')', '(');
keyValuePairs.Add('}', '{');
keyValuePairs.Add(']', '[');

foreach (char c in s)
{
    if (keyValuePairs.Values.Contains(c))
    {
        stack.Push(c);
    }
    else
    {
        if ((stack.Count > 0 && stack.Peek() == keyValuePairs[c]))
        {
            stack.Pop();
        }
        else
        {
            isValid = false;
        }
    }
}
if (stack.Count > 0)
{
    isValid = false;
}
return isValid;

---------------------------------------------------------------------------------------

leetcode - 28 - StrStr

public int StrStr(string haystack, string needle) {
        StringBuilder sb = new StringBuilder();
int result = -1;
if (needle == "")
{
    return 0;
}
int l = needle.Length;
int upperBound = haystack.Length - needle.Length+1;
for(int i = 0; i < upperBound; i++)
{
    sb.Clear();
    for(int j = 0; j < l; j++)
    {
        sb.Append(haystack[i + j]);
    }
    if (sb.ToString() == needle)
    {
        result = i; break;
    }
}
return result;
    }
